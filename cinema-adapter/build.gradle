plugins {
    id 'java'
}

group = 'com.cinema'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    // module dependency
    implementation project(':cinema-application')
    implementation project(':cinema-domain')

    // spring boot web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // rate limiting
    implementation("com.google.guava:guava:33.4.6-jre")

    // spring boot redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson:3.45.1'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor("com.querydsl:querydsl-apt:5.0.0:jakarta")
    annotationProcessor("jakarta.annotation:jakarta.annotation-api")
    annotationProcessor("jakarta.persistence:jakarta.persistence-api")

    // mysql
    runtimeOnly("com.mysql:mysql-connector-j")
}

test {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}
sourceSets {
    main.java.srcDirs += [ generated ]
}
clean {
    delete file(generated)
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << "-parameters"
}